/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include "mozilla/dom/MediaIPCUtils.h";

<<<<<<< HEAD:mozilla-release/dom/media/ipc/PVideoDecoder.ipdl
include protocol PVideoDecoderManager;
include PMediaDecoderParams;
include LayersSurfaces;
||||||| merged common ancestors
include protocol PVideoDecoderManager;
include LayersSurfaces;
=======
include protocol PRemoteDecoderManager;

using mozilla::MediaDataDecoder::ConversionRequired from "PlatformDecoderModule.h";
using mozilla::TrackInfo::TrackType from "MediaInfo.h";
>>>>>>> upstream-releases:mozilla-release/dom/media/ipc/PRemoteDecoder.ipdl
using mozilla::layers::LayersBackend from "mozilla/layers/LayersTypes.h";

include PMediaDecoderParams;
include LayersSurfaces;

<<<<<<< HEAD:mozilla-release/dom/media/ipc/PVideoDecoder.ipdl
struct VideoDataIPDL
||||||| merged common ancestors
struct MediaDataIPDL
{
  int64_t offset;
  int64_t time;
  int64_t timecode;
  int64_t duration;
  uint32_t frames;
  bool keyframe;
};

struct VideoDataIPDL
=======
namespace mozilla {

struct RemoteVideoDataIPDL
>>>>>>> upstream-releases:mozilla-release/dom/media/ipc/PRemoteDecoder.ipdl
{
  MediaDataIPDL base;
  IntSize display;
  IntSize frameSize;
  SurfaceDescriptor sd;
  int32_t frameID;
};

<<<<<<< HEAD:mozilla-release/dom/media/ipc/PVideoDecoder.ipdl
||||||| merged common ancestors
struct MediaRawDataIPDL
{
  MediaDataIPDL base;
  Shmem buffer;
};

=======
struct RemoteAudioDataIPDL
{
  MediaDataIPDL base;
  uint32_t channels;
  uint32_t rate;
  uint32_t channelMap;
  Shmem buffer;
};

union DecodedOutputIPDL
{
  RemoteAudioDataIPDL;
  RemoteVideoDataIPDL;
};

>>>>>>> upstream-releases:mozilla-release/dom/media/ipc/PRemoteDecoder.ipdl
// This protocol provides a way to use MediaDataDecoder across processes.
// The parent side currently is only implemented to work with
// RemoteDecoderModule or WindowsMediaFoundation.
// The child side runs in the content process, and the parent side runs
// in the RDD process or the GPU process. We run a separate IPDL thread
// for both sides.
async protocol PRemoteDecoder
{
  manager PRemoteDecoderManager;
parent:
  async Init();

  async Input(MediaRawDataIPDL data);

  async Flush();
  async Drain();
  async Shutdown();
  // To clear the threshold, call with INT64_MIN.
  async SetSeekThreshold(TimeUnit time);

  async __delete__();

child:
  async InitComplete(TrackType trackType, nsCString decoderDescription,
                     bool hardware, nsCString hardwareReason,
                     ConversionRequired conversion);
  async InitFailed(nsresult reason);

  async FlushComplete();
  async ShutdownComplete();

  // Each output may include a SurfaceDescriptorGPUVideo that represents the decoded
  // frame. This SurfaceDescriptor can be used on the Layers IPDL protocol, but
  // must be released explicitly using DeallocateSurfaceDescriptorGPUVideo
  // on the manager protocol.
  async Output(DecodedOutputIPDL data);
  async InputExhausted();
  async DrainComplete();
  async Error(nsresult error);
};

} // namespace mozilla
